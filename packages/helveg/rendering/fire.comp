#version 450

#extension GL_ARB_separate_shader_objects : enable
// #extension GL_ARB_shading_language_420pack : enable

const vec4 lowColor = vec4(0.8f, 0.0f, 0.0f, 1.0f);
const vec4 midColor = vec4(1.0f, 0.5f, 0.0f, 1.0f);
const vec4 topColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);

struct Particle {
    vec3 position;
    float pad;
    vec4 color;
};

struct Emitter {
    vec3 position;
    float radius;
};

layout(local_size_x = 32, local_size_z = 32) in;

layout(std430, binding = 0) buffer Particles
{
    Particle particles[];
};

layout(std430, binding = 1) buffer Emitters
{
    Emitter emitters[];
};

layout(std140, binding = 2) uniform Time
{
    float sec;
    float secDelta;
};

// Based on https://thebookofshaders.com/10/
float rand(float v)
{
    return fract(sin(v) * 69301.11f);
}

// Based on https://thebookofshaders.com/11/
float noise(float v)
{
    float i = floor(v);
    float f = fract(v);
    return mix(rand(i), rand(i + 1.0f), smoothstep(0.0f, 1.0f, f));
}

float modHeight(float v, float height)
{
    return v - floor(v * (1.0f / height)) * height;
}

void main()
{

    Emitter emitter = emitters[gl_WorkGroupID.x];
    float maxHeight = 4.0f * emitter.radius;
    uint index = gl_WorkGroupID.x * (gl_WorkGroupSize.x * gl_WorkGroupSize.z) + gl_LocalInvocationIndex;
    vec3 localPos = particles[index].position - emitter.position;
    float snowflake = rand(index);

    float life = (1.0f - pow(snowflake, 4.0f));

    float height = life * maxHeight;
    float initialHeight = snowflake * height;
    float velocity = (snowflake + 1.0f) * 4.0f;
    float offsetY = modHeight(initialHeight + sec * velocity, height);

    float lateral = pow(smoothstep(0.0f, height, offsetY), 0.25f) * life;
    float radius = pow(rand(gl_LocalInvocationID.x), 2.0f) * emitter.radius;
    float angle = 3.14159f * (rand(gl_LocalInvocationID.z) * 2.0f - 1.0f);
    float wiggleX = (noise(gl_LocalInvocationID.x * 123.99 + sec) * 2.0f - 1.0f) * 2.0f;
    float wiggleZ = (noise(gl_LocalInvocationID.z * 98.2002 + sec) * 2.0f - 1.0f) * 2.0f;
    float offsetX = cos(angle) * radius * lateral + wiggleX;
    float offsetZ = sin(angle) * radius * lateral + wiggleZ;

    particles[index].position = emitter.position + vec3(offsetX, offsetY, offsetZ);

    particles[index].color = mix(
        mix(
            lowColor,
            midColor,
            smoothstep(0.0f, height * 0.3f, offsetY)),
        topColor,
        smoothstep(height * 0.3f, height, offsetY));
}
