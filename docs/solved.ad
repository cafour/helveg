# Solved Problems

While working on Helveg, I sometimes encounter problems that defy easy solutions. These issues usually take hours to figure out or work around. This is an incomplete list of them in no particular order.

Symbol Visibility::
Functions inside shared libraries have a _visibility_. They can (or should) be invoked only when their visibility is _public_. However, GCC/Clang and MSVC differ in the default symbol visibility. GCC/Clang make all symbols public whereas MSVC makes them hidden by default. Thus unless you use the `-fvisibility` option of GCC/Clang or the `CXX_VISIBILITY_PRESET` CMake property, you will encounter weird platform-specific issues.

MSBuildLocator on .NET Core::
Just remember that if you use MSBuildLocator on .NET Core, you won't be able to use the MSBuild libraries for .NET Framework from a Visual Studio installation. Thus, you won't be able to compile (all) .NET Framework projects. Oddly enough, the .NET Core MSBuild seems to work with Unity (and therefore Mono).

A single depth buffer for the whole swapchain::
Swapchain synchronization gets a bit tricky if you insist on having only one depth buffer shared among all images of the swapchain. According to link:https://github.com/KhronosGroup/Vulkan-Tools/pull/200[a GitHub issue from the Vulkan SDK] a queue submission needs to wait on previous submissions in the `COLOR_ATTACHMENT_OUTPUT`, `EARLY_FRAGMENT_TESTS`, and `LATE_FRAGMENT_TESTS` stages.

msvcp140_1.dll::
Newer builds of Windows 10/MSVC (at least in the servercore:1909 Docker image) add a dependency on a mysterious `msvcp140_1.dll` when compiling Vku. This leads to a situation where the .NET runtime is not able to load the vku.dll on older build of Windows 10, because this dependency is not satisfied. The solution, at least for Vku, was to link the C++ runtime statically with `/MT`.

Outdated Vulkan headers of glslang::
The Ubuntu image used for CI has Vulkan headers and glslangValidator that doesn't yet support `VK_KHR_ray_tracing`. Vku therefore pulls and builds the link:https://github.com/KhronosGroup/Vulkan-Headers[Vulkan-Headers] and link:https://github.com/KhronosGroup/glslang[glslang] repositories during CMake's configuration step.

Vulkan's coordinate system::
Vulkan has a different (and more widely used) link:http://anki3d.org/vulkan-coordinate-system/[coordinate system] than OpenGL. However, you may still want to use GLM. The change of depth range can be remedied with the `GLM_FORCE_DEPTH_ZERO_TO_ONE` define. The inverted y axis can then by fixed with `projection[1][1] *= -1;`.

Missing .NET Core SDK dependencies::
In short, MSBuildLocator link:https://github.com/microsoft/MSBuildLocator/issues/86[doesn't load some NuGet dependencies] that the SDK uses when building a project. The only solution, as far as I have found, is to depend on `NuGet.Frameworks` and `NuGet.ProjectModel` directly.

GitLab CI on Windows::
GitLab has its shared pool of CI runners that is available to open-source projects free of charge. That's great and all, but it only works on Linux. To be precise, it does work on Windows as well, but there currently are link:https://docs.gitlab.com/ee/user/gitlab_com/#shared-runners[no shared runners with Docker on Windows Containers]. One must provide its own runner to use Docker on Windows.

Hidden cursor with GLFW over RDP::
If you hide cursor with GLFW and then try to use the app over Remote Desktop, link:https://github.com/glfw/glfw/issues/1276[it freaks out]. Solution: Don't use hidden cursor over RDP.

64bit MSVC::
MSVC is not particularly easy to use. For instance, to tell it to compile a piece of code into a 64bit binary, one does not pass a parameter. Instead, one must find a specific batch script in the depths of Visual Studio or BuildTools -- `VC\Auxiliary\Build\vcvars64.bat`.
+
However, just running this script is not enough. Not when one uses Powershell and wants to continue to do so. No, on Powershell this script needs to be run thusly:
+
[source, batch]
----
cmd /c """$vsDir\VC\Auxiliary\Build\vcvars64.bat"" & set"
----
+
The output then needs to be parsed and environment variables set accordingly _again_.

CMake and .NET Core::
While it is possible to hook the `dotnet` command into `CMakeLists.txt` in such a way that the whole application gets built upon one `cmake --build .`, this solution is not perfect. For instance, it tends to hang when more threads get involved. It also produces a different filesystem hierarchy on each OS. I recommend settling for a custom build script that runs `cmake` and `dotnet` sequentially.

Lost device with VK_KHR_ray_tracing::
Don't forget to allocate and bind device memory for the acceleration structures themselves. Scratch buffers are not enough!
