# Build Instructions

## Environment

The following components are required to build Helveg and Vku:

* Windows 10 or Linux
* .NET Core SDK >= 3.1
* CMake >= 3.14
* X dev libraries or the Windows 10 SDK
* GCC/Clang/MSVC
* Ninja (Windows-only)

## Scripts

The easiest way to build Helveg is the `build.sh` or `build.ps1` script.

## Manual build

1. Change the current working directory to the root of Helveg's repository.
2. Create the `build` and `artifacts` directories.
3. Configure and build Vku.
    a. On Windows, make sure you are inside a _x64 Native Tools Command Prompt for VS 2019_ or have otherwise configured 64-bit MSVC to be detectable by CMake and run:
+
[source, powershell]
----
cmake -B "build" ^
    -DCMAKE_INSTALL_PREFIX="artifacts" ^
    -DCMAKE_BUILD_TYPE="Debug" ^
    -G Ninja
cmake --build "build" --target install
----
    b. On Linux, run:
+
[source, bash]
----
cmake -B "./build" \
    -DCMAKE_INSTALL_PREFIX="./artifacts" \
    -DCMAKE_BUILD_TYPE="Debug"
cmake --build "./build" --target install
----
4. To produce the executable in `build/helveg`, run the following with `<RID>`` replaced by the Runtime Identifier of the build environment:
+
[source, bash]
----
dotnet build --runtime <RID> --output "./build/helveg"
----
5. To produce the NuGet package, run:
+
[source, bash]
----
dotnet pack "./helveg"
----
+
NOTE: To build a complete Helveg NuGet package, both Windows and Linux builds of Vku, must be present in the `artifacts` directory.

6. To install the manually-built NuGet package, first uninstall any previously installed versions of Helveg:
+
[source, bash]
----
dotnet tool uninstall -g "helveg"
----
+
Then run:
+
[source,bash]
----
dotnet tool install -g "helveg" \
    --version "0.0.0-dev" \
    --add-source "./artifacts"
----
+
NOTE: In a Windows command line, replace the '`\`' continuation character with '`^`'.
